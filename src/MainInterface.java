
import ca.pfv.spmf.algorithms.sequentialpatterns.gsp_AGP.AlgoGSP;
import ca.pfv.spmf.algorithms.sequentialpatterns.gsp_AGP.items.SequenceDatabase;
import ca.pfv.spmf.algorithms.sequentialpatterns.gsp_AGP.items.creators.AbstractionCreator;
import ca.pfv.spmf.algorithms.sequentialpatterns.gsp_AGP.items.creators.AbstractionCreator_Qualitative;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import static ml.dayenio.datamining.testgsp.Testgsp.fileToPath;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Zayd
 */
public class MainInterface extends javax.swing.JFrame {

    private final JFileChooser openFileChooser;
    /**
     * Creates new form MainInterface1
     */
    public MainInterface() {
        initComponents();
        this.openFileChooser = new JFileChooser();
        this.openFileChooser.setCurrentDirectory(new File("C:\\"));
        this.resultTable.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        ouvrirBtn = new javax.swing.JButton();
        filePathLbl = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        minSuppTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        analyserBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ouvrirBtn.setText("Ouvrir ...");
        ouvrirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Minimum support");

        minSuppTF.setText("1.0");
        minSuppTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minSuppTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ouvrirBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filePathLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minSuppTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ouvrirBtn)
                    .addComponent(filePathLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(minSuppTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"a",  new Integer(2),  new Float(2.0)},
                {"b",  new Integer(2),  new Float(2.0)},
                {"c",  new Integer(4),  new Float(2.5)},
                {"d",  new Integer(1),  new Float(0.1)},
                {"f",  new Integer(5),  new Float(3.0)}
            },
            new String [] {
                "Itemset", "Support", "moy_coh"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(resultTable);

        analyserBTN.setText("Analyser");
        analyserBTN.setToolTipText("");
        analyserBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyserBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(analyserBTN)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyserBTN)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minSuppTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minSuppTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minSuppTFActionPerformed

    private void analyserBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyserBTNActionPerformed
        // TODO add your handling code here:
        String filePath = this.filePathLbl.getText();
        if(!filePath.equals("")){
            try{
                double minSupp = Double.parseDouble(this.minSuppTF.getText());
                if(minSupp > 0){
                    //run algorithm
                    double support = minSupp, mingap = 0, maxgap = 1, windowSize = 0;

                    boolean keepPatterns = true;
                    boolean verbose=false;

                    // if you set the following parameter to true, the sequence ids of the sequences where
                    // each pattern appears will be shown in the result
                    boolean outputSequenceIdentifiers = false;

                    AbstractionCreator abstractionCreator = AbstractionCreator_Qualitative.getInstance();
                    SequenceDatabase sequenceDatabase = new SequenceDatabase(abstractionCreator);

                    try {
                        sequenceDatabase.loadFile(java.net.URLDecoder.decode(filePath,"UTF-8"), support);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, 
                                                      "Veuillez choisir un fichier valide!!",
                                                      "fichier introuvable",
                                                      JOptionPane.ERROR_MESSAGE);
                    }

                    boolean isRelative = (support<1);
                    AlgoGSP algorithm = new AlgoGSP(support, mingap, maxgap, windowSize,abstractionCreator,isRelative);
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy_MM_dd");
                    LocalDate localDate = LocalDate.now();
                    String outFilePath = "./Out_"+support+"_"+dtf.format(localDate)+".csv";
                    try {
                        File file = new File(outFilePath);
                        file.createNewFile();
                        //System.out.println("Empty File Created:- " + file.length());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    try {
                        algorithm.runAlgorithm(sequenceDatabase,keepPatterns,verbose,outFilePath, outputSequenceIdentifiers);
                    } catch (IOException ex) {
                        Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //System.out.println(algorithm.getNumberOfFrequentPatterns()+ " frequent pattern found.");

                    String[] data = algorithm.printedOutputToSaveInFile().split("\n");
                    DefaultTableModel dm = new DefaultTableModel(0,0);
                    String header[] = new String [] {"Itemset", "Support", "moy_coh"};
                    dm.setColumnIdentifiers(header);
                    this.resultTable.setModel(dm);
                    TableRowSorter<TableModel> sorter = new TableRowSorter<>(this.resultTable.getModel());
                    this.resultTable.setRowSorter(sorter);
                    sorter.setComparator(0, new Comparator<String>() {
                        @Override
                        public int compare(String name1, String name2) {
                            if(name1.length()-name2.length() == 0){
                                return name1.compareTo(name2);
                            }
                            return name1.length()-name2.length();
                        }
                    });
                    
                    class FloatComparator implements Comparator {
                        public int compare(Object o1, Object o2) {
                            float dif = (float)o1-(float)o2;
                            int pow = Float.toString(dif).split("\\.")[1].length();
                            return (int) (dif * Math.pow(10, pow));
                        }

                        public boolean equals(Object o2) {
                            return this.equals(o2);
                        }
                    }
                    sorter.setComparator(2, new FloatComparator());
                    
                    class IntComparator implements Comparator {
                        public int compare(Object o1, Object o2) {
                            Integer int1 = (Integer)o1;
                            Integer int2 = (Integer)o2;
                            return int1.compareTo(int2);
                        }

                        public boolean equals(Object o2) {
                            return this.equals(o2);
                        }
                    }
                    sorter.setComparator(1, new IntComparator());
                    
                    BufferedReader br = null;
                    FileReader fr = null;

                    //br = new BufferedReader(new FileReader(FILENAME));
                    try{
                    fr = new FileReader(outFilePath);
                    br = new BufferedReader(fr);
                    
                    String sCurrentLine;
                    while ((sCurrentLine = br.readLine()) != null) {
                        String[] cols = sCurrentLine.split(",");
                        if(Float.parseFloat(cols[2])>9.0){
                            System.out.println(cols[0]);
                        }
                        dm.addRow(new Object[]{cols[0],Integer.parseInt(cols[1].trim()),Float.parseFloat(cols[2])});
                    }
                    }catch(FileNotFoundException fnfe){
                        
                    } catch (IOException ex) {
                        Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
                    }finally{
                    if (br != null)
                        try {
                            br.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (fr != null)
                        try {
                            fr.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
                }else{
                    JOptionPane.showMessageDialog(this, 
                        "Vérifier la valeur de Minimum support!!",
                        "valeur erronée",
                        JOptionPane.ERROR_MESSAGE);
                }
            }catch(NumberFormatException nfe){
                //show error
                JOptionPane.showMessageDialog(this, 
                        "Vérifier la valeur de Minimum support!!",
                        "valeur erronée",
                        JOptionPane.ERROR_MESSAGE);
            }
        }else{
            //show error
            JOptionPane.showMessageDialog(this, 
                        "Veuillez choisir un fichier valide!!",
                        "fichier introuvable",
                        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analyserBTNActionPerformed

    private void ouvrirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirBtnActionPerformed
        // TODO add your handling code here:
        int returnVal = this.openFileChooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            filePathLbl.setText(openFileChooser.getSelectedFile().getAbsolutePath());    
        }
    }//GEN-LAST:event_ouvrirBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyserBTN;
    private javax.swing.JLabel filePathLbl;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField minSuppTF;
    private javax.swing.JButton ouvrirBtn;
    private javax.swing.JTable resultTable;
    // End of variables declaration//GEN-END:variables
}
